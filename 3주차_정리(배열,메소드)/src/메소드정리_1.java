/*
 *  메소드: 특정 작업을 하기 위한 명령문의 집합
 *  	** 메소드 VS 함수 (기술면접List)
 *  		메소드: 클래스 종속(클래스 안에서 생성)
 *  		함수: 독립적으로 생성 => 자바스크립트, C언어 ==> 기능은 함수,메소드 동일
 *  	  특정 작업(한가지 기능을 수행)
 *  			------------- 재사용성을 높일 수 있음
 *  	  ** 형상관리(기술면접 List): Git
 *  	1) 메소드를 사용하는 목적
 *  		=> 반복되는 기능을 제거
 *  		=> 코드관리가 쉬움(기능별로 나눠서 처리하기 때문) = 문장의 단락을 나눠 처리(유지보수 편리)
 *  		=> 소스가 간결해짐(중복코드를 제거하기 때문)
 *  		=> 다른 클래스와 연결
 *  		=> 재사용률을 높임 (출력: System.out.println(), Math.random()...)
 *  	2) 메소드 종류
 *  		=> 공통 메소드: 자동으로 메모리에 저장 = static ****
 *  		=> 인슽턴스 메소드: 메모리마다 따로 저장되는 메소드 
 *  		=> 추상 메소드
 *  	3) 메소드를 만드는 형식
 *  		1. 리턴형 2.메소드명(3.매개변수)
 *  		{
 *  			처리 문장 ==> 지역변수, 연산처리, 제어문 처리
 *  			return 값;
 *  		}
 *  	4) 메소드의 구성요소
 *  		1. 리턴형: 사용자가 요청 -> 처리 -> 결과값을 사용자에게 전송
 *  				------------------------------------
 *  				웹) 로그인, 회원가입, 게시판 글쓰기, 게시판, 영화 => 목록, 상세보기..: 결과값이 있어야 화면을 변경해서 보여줌
 *  					메뉴(메소드), 버튼
 *  					==> 기능 설계(벤치마킹 ==> 요구사항 분석)
 *  				=> 한 개만 사용 가능 
 *  					기본형(int, double, String, 클래스, 배열)
 *  					형식)
 *  						int 메소드명()
 *  						double 메소드명()
 *  						String 메소드명()
 *  						----------------------> 기본적으로 리턴형 씀 =Call By Value
 *  						Movie 메소드명()
 *  						int[] 메소드명()
 *  						----------------------> 리턴형 안쓸 수 있고 매개변수 사용할 수 있음. =Call By Reference
 *  				***결과값이 없는 경우: void 사용 (메소드 자체에서 처리)
 *  		2. 메소드명: 식별자(변수)
 *  				알파벳, 한글(대소문자 구분)
 *  				숫자 사용O(앞에 사용X)
 *  				키워드 사용X
 *  				특수문자(_,$) 사용O
 *  				메소드명의 길이는 제한 없음(5~12)
 *  				** 소문자로 시작
 *  				파일이름을 가지고 온다: getFileName()
 *  								   -   -
 *  								저장을 한다: setXxx()
 *  								가지고 온다: getXxx()
 *  								존재여부 확인(리턴형 boolean): isXxx()
 *  								의미 있는 명칭 => 찾기
 *  				** 단어가 두개 이상 -> 첫글자는 대문자, _ 사용
 *  				** 변수명, 메소드명 ...:리펙토링
 *  
 *  		3. 매개변수: 사용자가 요청한 값
 *  				웹) 입력, 클릭(<a>, <button>) ==> URL 주소를 이용해서 데이터 전송
 *  					https://movie.daum.net/moviedb/main?movieId=133423
 *  				매개변수는 개수 제한이 없음(로그인(id,pwd), 회원가입, 글쓰기...)
 *  												-------------- 배열,클래스
 *  				매개변수가 3개 이상-> 배열, 클래스 이용
 *  				구분:, 이용
 *  				*** 사용자로부터 어떤 값을 받을지, 어떤 결과를 보내줄 것인지 고민
 *  				메소드명(int a,int b,int c)
 *  				메소드명(int[] arr)
 *  				** 매개변수 없는 경우 있음: () 사용
 *  		4. 처리문장: 연산처리(연산자), 제어문
 *  				  --------------
 *  				   오라클, 파일 찾기에 많이 사용 
 *  		5. 결과값: 메소드 안에 "return 값"
 *  				 결과값이 없는 경우: void ==> return 생략 가능 (컴파일러가 자동으로 첨부)
 *  				return 위치: 메소드 안에만 존재하면 됨 
 *  				return은 메소드 종료할 때 사용 (for문의 break와 비슷) 
 *   	5) 메소드 => 생각
 *   		1. 동작 과정(행위)
 *   		2. 화면에 출력된 내용: 리턴형 결정됨
 *   		3. 사용자에게 유도: 매개변수 뭘 넘겨주는지 확인 
 *   		--------------------------------
 *   	6) 메소드 유형
 *   		-----------------------
 *   			리턴형			매개변수
 *   		-----------------------
 *   			O			 O
 *   				=> boolean isLogin(String id, String pwd) ***메소드 유형 중 가장 많이 나오는 유형 
 *   				  --------		   ----------------------		
 *   				   로그인 요청 -> 사용자로부터 id,pwd 받아서 결과값으로는 true/false를 전송
 *   				   목록 -> 사용자로부터 페이지 번호를 받아서 -> 해당하는 이미지 여러개 전송 
 *   				   String[] moviList(int page)
 *   				   ------   --------  -------	리턴형 메소드명 처리할 데이터 
 *   				   상세보기 요청 -> 사용자로부터 영화 고유번호 받아서 상세보기에 출력할 데이터 전송 
 *   			 	   String movieDetail(int movieNO) 
 *   		-----------------------
 *   			O			 X
 *   				=> double random(): 값만 전송
 *   				=> String trim(): 값만 전송 
 *   		-----------------------
 *   			X			 O
 *   		   --- ***리턴형이 없는 경우: void
 *   				=> 메소드 안에서 자체 처리(뉴스 출력)
 *   					System.out.println("Hello") => 원형: void println(String msg)
 *   					=> 파일 저장, 파일 수정
 *   		-----------------------
 *   			X			 X
 *   			-- 다음줄로 출력한다 <br>. System.out.println()
 *   		-----------------------
 *   	예)
 *   		1~10까지 출력하는 메소드 만들기 ==> 메소드 자체에서 처리(리턴형X,매개변수X)
 *   		1~10까지 합을 구하라 ==> (리턴형O,매개변수X)
 *   				------- 리턴형
 *   		1~n까지 합을 구하라 ==> n을 사용자로부터 받아서 합 보내줌(리턴형O,매개변수O)
 *   		--- 사용자로부터 받음
 *   		사용자로부터 단을 받아서 해당단을 출력
 *   						---------메소드 자체 처리(void).리턴형X,매개변수O
 *   		
 *   		매개변수는 사용자로부터 받은 값
 *   		=> Scanner: 매개변수 존재
 *   		=> 웹, 윈도우: 입력창(검색, 로그인, 회원가입)
 *   		사용자가 요구할 때(구하라...) => 매개변수 존재 
 *   		---------------------------------- 1개를 만든다(4개유형 다 써보고-> 편한 것) 
 *   		
 *   
 *   
 *  
 */
public class 메소드정리_1 {
	//1~10까지 출력하는 메소드 만들기 ==> 1~10까지 출력하는 기능(메소드) 
	static void print()
	{
		//System.out.println("1 2 3 4 5 6 7 8 9 10");
		for(int i=1;i<=10;i++)
		{
			System.out.print(i+" ");
		}
	}
	//1~10까지 합을 구하라 --> 리턴형 존재 (범위가 지정되면 매개변수는 존재하지X)
	static int hap()
	{
		//1~10까지 합을 구해서 전송
		int sum=0;
		for(int i=0;i<=10;i++)
		{
			sum+=i;
		}
		return sum;
	}
	//1~n까지의 합을 구하라
	static int hap2(int n)
	{
		int sum2=0;
		for(int i=1;i<=n;i++)
		{
			sum2+=i;
		}
		return sum2;
	}
	//사용자로부터 단을 받아서 해당 단 출력 
	static void gugudan(int dan)
	{
		for(int i=1;i<=9;i++)
		{
			System.out.println(dan+"*"+dan*i);
		}
		//return; 생략 가능
	}
	//main() ==> 프로그램의 시작점 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//메소드 호출 ==> 메소드명(매개변수값..) : void의 경우 처리
		// 리턴형O ==> 데이터형(리턴형의 데이터형과 일치) 변수=메소드명(매개변수)
		// System.out.println(메소드명())
		/*
		 * 	메소드는 호출을 하면 처음부터 return이 있는 곳까지 수행 -> 호출한 위치로 다시 돌아옴 
		 */
		print(); //리턴형X 매개변수X
		System.out.println("==============");
		int sum=hap(); //리턴형O 매개변수X
		//리턴형이 있는 경우에는 리턴값(return 10)을 받아서 변수에 저장 
		System.out.println("sum="+sum);
		System.out.println("sum="+hap()); //메소드 안에서 메소드 호출이 가능 
		
		int sum2=hap2(100); //리턴형O 매개변수O
		System.out.println("sum="+sum2);
		//static void gugudan(int dan) ==> dan=7
		gugudan(7);
		//호출 방법 ==> 메소드 안에 있는 명령문을 실행하라..
	}

}
